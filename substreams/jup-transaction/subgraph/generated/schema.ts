// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class JupTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JupTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JupTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("JupTransaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): JupTransaction | null {
    return changetype<JupTransaction | null>(
      store.get_in_block("JupTransaction", id),
    );
  }

  static load(id: string): JupTransaction | null {
    return changetype<JupTransaction | null>(store.get("JupTransaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get preTokenBalance(): TokenBalanceLoader {
    return new TokenBalanceLoader(
      "JupTransaction",
      this.get("id")!.toString(),
      "preTokenBalance",
    );
  }

  get postTokenBalance(): TokenBalanceLoader {
    return new TokenBalanceLoader(
      "JupTransaction",
      this.get("id")!.toString(),
      "postTokenBalance",
    );
  }
}

export class TokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenBalance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenBalance | null {
    return changetype<TokenBalance | null>(
      store.get_in_block("TokenBalance", id),
    );
  }

  static load(id: string): TokenBalance | null {
    return changetype<TokenBalance | null>(store.get("TokenBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get preTransaction(): string | null {
    let value = this.get("preTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set preTransaction(value: string | null) {
    if (!value) {
      this.unset("preTransaction");
    } else {
      this.set("preTransaction", Value.fromString(<string>value));
    }
  }

  get postTransaction(): string | null {
    let value = this.get("postTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set postTransaction(value: string | null) {
    if (!value) {
      this.unset("postTransaction");
    } else {
      this.set("postTransaction", Value.fromString(<string>value));
    }
  }

  get accountIndex(): BigInt {
    let value = this.get("accountIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountIndex(value: BigInt) {
    this.set("accountIndex", Value.fromBigInt(value));
  }

  get mint(): string {
    let value = this.get("mint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mint(value: string) {
    this.set("mint", Value.fromString(value));
  }

  get uiTokenAmount(): UiTokenAmountLoader {
    return new UiTokenAmountLoader(
      "TokenBalance",
      this.get("id")!.toString(),
      "uiTokenAmount",
    );
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get programId(): string {
    let value = this.get("programId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set programId(value: string) {
    this.set("programId", Value.fromString(value));
  }
}

export class UiTokenAmount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UiTokenAmount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UiTokenAmount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UiTokenAmount", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UiTokenAmount | null {
    return changetype<UiTokenAmount | null>(
      store.get_in_block("UiTokenAmount", id),
    );
  }

  static load(id: string): UiTokenAmount | null {
    return changetype<UiTokenAmount | null>(store.get("UiTokenAmount", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenBalance(): string {
    let value = this.get("tokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenBalance(value: string) {
    this.set("tokenBalance", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get amount(): string {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get uiAmountString(): string {
    let value = this.get("uiAmountString");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set uiAmountString(value: string) {
    this.set("uiAmountString", Value.fromString(value));
  }
}

export class TokenBalanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenBalance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenBalance[]>(value);
  }
}

export class UiTokenAmountLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UiTokenAmount[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UiTokenAmount[]>(value);
  }
}
