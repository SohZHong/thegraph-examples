// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { ConfirmedTransaction } from "../../sf/solana/type/v1/ConfirmedTransaction";

export class MyData {
  static encode(message: MyData, writer: Writer): void {
    const transactions = message.transactions;
    for (let i: i32 = 0; i < transactions.length; ++i) {
      writer.uint32(10);
      writer.fork();
      ConfirmedTransaction.encode(transactions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MyData {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MyData();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.transactions.push(
            ConfirmedTransaction.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  transactions: Array<ConfirmedTransaction>;

  constructor(transactions: Array<ConfirmedTransaction> = []) {
    this.transactions = transactions;
  }
}
